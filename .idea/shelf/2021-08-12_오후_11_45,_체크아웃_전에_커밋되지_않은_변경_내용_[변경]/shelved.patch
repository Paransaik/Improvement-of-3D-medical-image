Index: voxel.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport os\r\nimport sys\r\n\r\nclass PyVoxel:\r\n\r\n    def __init__(self):\r\n        self.m_Org = -1\r\n        self.m_nX = 0\r\n        self.m_nY = 0\r\n        self.m_nZ = 0\r\n\r\n        self.m_fXSp=1.0\r\n        self.m_fYSp=1.0\r\n        self.m_fZSp=1.0\r\n\r\n        self.m_fXOrg=-1.0\r\n        self.m_fYOrg=-1.0\r\n        self.m_fZOrg=-1.0\r\n        self.m_Voxel = []\r\n\r\n    def initialize(self):\r\n        self.m_Org = -1\r\n        self.m_nX = 0\r\n        self.m_nY = 0\r\n        self.m_nZ = 0\r\n\r\n        self.m_fXSp=1.0\r\n        self.m_fYSp=1.0\r\n        self.m_fZSp=1.0\r\n\r\n        self.m_fXOrg=-1.0\r\n        self.m_fYOrg=-1.0\r\n        self.m_fZOrg=-1.0\r\n        self.m_Voxel = []\r\n\r\n    def ReadFromRaw(self,filename):\r\n        with open(filename,'rb') as f:\r\n            try:\r\n                Header = np.fromfile(f,dtype='int32',count=1)\r\n                self.m_Org = Header[0]\r\n\r\n                if self.m_Org == -1 :\r\n                    Header = np.fromfile(f,dtype='float32',count=6) # \"x, y, z spacing\", \"x, y, z orgin\"\r\n                    self.m_fXSp = Header[0]\r\n                    self.m_fYSp = Header[1]\r\n                    self.m_fZSp = Header[2]\r\n\r\n                    self.m_fXOrg = Header[3]\r\n                    self.m_fYOrg = Header[4]\r\n                    self.m_fZOrg = Header[5]\r\n\r\n                    Header = np.fromfile(f,dtype='int32',count=1) # \"nX\" \r\n                    self.m_nX = Header[0]\r\n                else:\r\n                    self.m_nX = self.m_Org\r\n\r\n                Header = np.fromfile(f,dtype='int32',count=2) # nY nZ\r\n                self.m_nY = Header[0]\r\n                self.m_nZ = Header[1]\r\n\r\n                Data = np.fromfile(f, dtype='int16', count=self.m_nX*self.m_nY*self.m_nZ)\r\n                self.m_Voxel = np.reshape(Data,(self.m_nZ ,self.m_nY ,self.m_nX ))\r\n\r\n            except IOError:\r\n                print('Could not read file'+ filename)\r\n                sys.exit()\r\n\r\n    def ReadFromBin(self,filename):\r\n            with open(filename,'rb') as f:\r\n                try:\r\n                    Header =np.fromfile(f,dtype='int32',count=1)\r\n                    self.m_Org = Header[0]\r\n\r\n                    if self.m_Org == -1 :\r\n                        Header =np.fromfile(f,dtype='float32',count=6)\r\n                        self.m_fXSp = Header[0]\r\n                        self.m_fYSp = Header[1]\r\n                        self.m_fZSp = Header[2]\r\n\r\n                        self.m_fXOrg = Header[3]\r\n                        self.m_fYOrg = Header[4]\r\n                        self.m_fZOrg = Header[5]\r\n\r\n                        Header = np.fromfile(f,dtype='int32',count=1)\r\n                        self.m_nX = Header[0]\r\n                    else:\r\n                        self.m_nX = self.m_Org\r\n\r\n                    Header =np.fromfile(f,dtype='int32',count=2)\r\n                    self.m_nY = Header[0]\r\n                    self.m_nZ = Header[1]\r\n                    \r\n                    Data = np.fromfile(f, dtype='uint8', count=self.m_nX*self.m_nY*self.m_nZ)\r\n                    self.m_Voxel = np.reshape(Data,(self.m_nZ ,self.m_nY ,self.m_nX ))\r\n\r\n                except IOError:\r\n                    print('Could not read file'+ filename)\r\n                    sys.exit()\r\n                    \r\n    def WriteToRaw(self,filename):\r\n        HeaderDim = np.array([self.m_Org, self.m_nX, self.m_nY, self.m_nZ], dtype = np.int32)\r\n        HeaderSpOrg = np.array([self.m_fXSp, self.m_fYSp, self.m_fZSp, self.m_fXOrg, self.m_fYOrg, self.m_fZOrg], dtype = np.float32)\r\n\r\n        Save = self.m_Voxel.astype(np.int16, copy = False) # if the type of m_voxel is np.int16, copy operation isn't perform\r\n       \r\n        with open(filename,'wb') as f:\r\n            HeaderDim[0].tofile(f)\r\n            HeaderSpOrg.tofile(f)\r\n            HeaderDim[1:].tofile(f)\r\n            Save.tofile(f)\r\n\r\n    def WriteToBin(self,filename):\r\n        HeaderDim = np.array([self.m_Org, self.m_nX, self.m_nY, self.m_nZ], dtype = np.int32)\r\n        HeaderSpOrg = np.array([self.m_fXSp, self.m_fYSp, self.m_fZSp, self.m_fXOrg, self.m_fYOrg, self.m_fZOrg], dtype = np.float32)\r\n        \r\n        Save = self.m_Voxel.astype(np.uint8, copy = False)\r\n\r\n        with open(filename,'wb') as f:\r\n            HeaderDim[0].tofile(f)\r\n            HeaderSpOrg.tofile(f)\r\n            HeaderDim[1:].tofile(f)\r\n            Save.tofile(f)\r\n\r\n    def AdjustPixelRange(self, Lower, Upper):\r\n        # version 2 \r\n        range_ratio = (Upper - Lower) / 256.0\r\n        pData = self.m_Voxel\r\n\r\n        img_adjusted = (pData - Lower)/range_ratio\r\n        img_adjusted = img_adjusted.clip(0, 255)\r\n    \r\n        return img_adjusted\r\n\r\n      \r\n\r\n    def NumpyArraytoVoxel(self, data):\r\n        self.initialize()\r\n\r\n        Dim = data.shape\r\n        self.m_nX = Dim[2]\r\n        self.m_nY = Dim[1]\r\n        self.m_nZ = Dim[0]\r\n\r\n        self.m_Voxel = data.astype(np.int16, copy = False)\r\n    def ConvertValue(self, SrcV, TarV):\r\n        idx = self.m_Voxel == SrcV\r\n        self.m_Voxel[idx] = TarV\r\n\r\n    def SaveWithoutHeader(self, filename):\r\n        Save = self.m_Voxel.astype(np.uint8, copy = False)\r\n\r\n        with open(filename,'wb') as f:\r\n            Save.tofile(f)\r\n    def Normalize(self):\r\n        self.m_Voxel = self.m_Voxel.astype(np.float32, copy = False)\r\n        maxvalue = np.max(self.m_Voxel)\r\n        print (maxvalue)\r\n        self.m_Voxel = self.m_Voxel/maxvalue\r\n    def NormalizeMM(self):\r\n        self.m_Voxel = self.m_Voxel.astype(np.float32, copy = False)\r\n        maxvalue = np.max(self.m_Voxel)\r\n        minvalue = np.min(self.m_Voxel)\r\n        # print minvalue, maxvalue\r\n        diff = maxvalue - minvalue\r\n        self.m_Voxel = (self.m_Voxel - minvalue)/diff\r\n    def AdjustPixelRangeNormalize(self, Upper):\r\n        self.m_Voxel = self.m_Voxel.astype(np.float32, copy = False)\r\n        minvalue = np.min(self.m_Voxel)\r\n        self.m_Voxel = self.m_Voxel.clip(minvalue, Upper)\r\n\r\n        diff = Upper - minvalue\r\n        self.m_Voxel = (self.m_Voxel - minvalue)/diff\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/voxel.py b/voxel.py
--- a/voxel.py	
+++ b/voxel.py	
@@ -1,7 +1,7 @@
 import numpy as np
 import os
 import sys
-
+# test 
 class PyVoxel:
 
     def __init__(self):
